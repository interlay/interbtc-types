{
    "types": [
        {
            "minmax": [
                0,
                100
            ],
            "types": {
                "H256Le": "H256",
                "Value": "i64",
                "Collateral": "Balance",
                "Wrapped": "Balance",
                "UnsignedInner": "u128",
                "StatusCode": {
                    "_enum": [
                        "Running",
                        "Error",
                        "Shutdown"
                    ]
                },
                "Address": "AccountId",
                "LookupSource": "AccountId",
                "Status": "StatusCode",
                "ErrorCode": {
                    "_enum": [
                        "None",
                        "OracleOffline"
                    ]
                },
                "VaultStatus": {
                    "_enum": {
                        "Active": "bool",
                        "Liquidated": "()",
                        "CommittedTheft": "()"
                    }
                },
                "RawBlockHeader": {
                    "0": "[u8; 80]"
                },
                "LockIdentifier": "[u8; 8]",
                "RichBlockHeader": {
                    "block_header": "BlockHeader",
                    "block_height": "u32",
                    "chain_id": "u32",
                    "para_height": "BlockNumber"
                },
                "AccountData": {
                    "free": "Balance",
                    "reserved": "Balance",
                    "misc_frozen": "Balance",
                    "fee_frozen": "Balance"
                },
                "OrmlAccountData": {
                    "free": "Balance",
                    "reserved": "Balance",
                    "frozen": "Balance"
                },
                "OrmlBalanceLock": {
                    "amount": "Balance",
                    "id": "LockIdentifier"
                },
                "BlockHeader": {
                    "merkle_root": "H256Le",
                    "target": "U256",
                    "timestamp": "u32",
                    "version": "i32",
                    "hash": "H256Le",
                    "hash_prev_block": "H256Le",
                    "nonce": "u32"
                },
                "BlockChain": {
                    "chain_id": "u32",
                    "start_height": "u32",
                    "max_height": "u32"
                },
                "BtcAddress": {
                    "_enum": {
                        "P2PKH": "H160",
                        "P2SH": "H160",
                        "P2WPKHv0": "H160",
                        "P2WSHv0": "H256"
                    }
                },
                "BtcPublicKey": "[u8; 33]",
                "Wallet": {
                    "addresses": "BTreeSet<BtcAddress>",
                    "public_key": "BtcPublicKey"
                },
                "VaultCurrencyPair": {
                    "collateral": "CurrencyId",
                    "wrapped": "CurrencyId"
                },
                "VaultId": {
                    "account_id": "AccountId",
                    "currencies": "VaultCurrencyPair"
                },
                "Vault": {
                    "id": "VaultId",
                    "wallet": "Wallet",
                    "status": "VaultStatus",
                    "banned_until": "Option<BlockNumber>",
                    "to_be_issued_tokens": "Balance",
                    "issued_tokens": "Balance",
                    "to_be_redeemed_tokens": "Balance",
                    "to_be_replaced_tokens": "Balance",
                    "replace_collateral": "Balance",
                    "active_replace_collateral": "Balance",
                    "liquidated_collateral": "Balance"
                },
                "DefaultVault": "Vault",
                "IssueRequestStatus": {
                    "_enum": {
                        "Pending": "()",
                        "Completed": "Option<H256>",
                        "Cancelled": "()"
                    }
                },
                "IssueRequest": {
                    "vault": "VaultId",
                    "opentime": "BlockNumber",
                    "period": "BlockNumber",
                    "griefing_collateral": "Balance",
                    "amount": "Balance",
                    "fee": "Balance",
                    "requester": "AccountId",
                    "btc_address": "BtcAddress",
                    "btc_public_key": "BtcPublicKey",
                    "btc_height": "u32",
                    "status": "IssueRequestStatus"
                },
                "RedeemRequestStatus": {
                    "_enum": {
                        "Pending": "()",
                        "Completed": "()",
                        "Reimbursed": "bool",
                        "Retried": "()"
                    }
                },
                "CurrencyId": {
                    "_enum": [
                        "DOT",
                        "INTERBTC",
                        "INTR",
                        "KSM",
                        "KBTC",
                        "KINT"
                    ]
                },
                "OracleKey": {
                    "_enum": {
                        "ExchangeRate": "CurrencyId",
                        "FeeEstimation": "()"
                    }
                },
                "RedeemRequest": {
                    "vault": "VaultId",
                    "opentime": "BlockNumber",
                    "period": "BlockNumber",
                    "fee": "Balance",
                    "transfer_fee_btc": "Balance",
                    "amount_btc": "Balance",
                    "premium": "Balance",
                    "redeemer": "AccountId",
                    "btc_address": "BtcAddress",
                    "btc_height": "u32",
                    "status": "RedeemRequestStatus"
                },
                "ReplaceRequestStatus": {
                    "_enum": [
                        "Pending",
                        "Completed",
                        "Cancelled"
                    ]
                },
                "ReplaceRequest": {
                    "old_vault": "VaultId",
                    "new_vault": "VaultId",
                    "amount": "Balance",
                    "griefing_collateral": "Balance",
                    "collateral": "Balance",
                    "accept_time": "BlockNumber",
                    "period": "BlockNumber",
                    "btc_address": "BtcAddress",
                    "btc_height": "u32",
                    "status": "ReplaceRequestStatus"
                },
                "RefundRequest": {
                    "vault": "VaultId",
                    "amount_btc": "Balance",
                    "fee": "Balance",
                    "issuer": "AccountId",
                    "btc_address": "BtcAddress",
                    "issue_id": "H256",
                    "completed": "bool"
                },
                "BalanceWrapper": {
                    "amount": "String"
                },
                "TimestampedValue": {
                    "value": "Value",
                    "timestamp": "Moment"
                },
                "Version": "u32",
                "SystemVault": {
                    "to_be_issued_tokens": "Balance",
                    "issued_tokens": "Balance",
                    "to_be_redeemed_tokens": "Balance",
                    "collateral": "Balance",
                    "currency_pair": "VaultCurrencyPair"
                },
                "DefaultSystemVault": "SystemVault",
                "FixedPoint": "FixedI128",
                "SignedFixedPoint": "FixedI128",
                "UnsignedFixedPoint": "FixedU128",
                "FundAccountJsonRpcRequest": {
                    "account_id": "AccountId"
                }
            }
        }
    ],
    "rpc": {
        "vaultRegistry": {
            "getVaultCollateral": {
                "description": "Get the vault's collateral (excluding nomination)",
                "params": [
                    {
                        "name": "vault_id",
                        "type": "VaultId"
                    }
                ],
                "type": "BalanceWrapper"
            },
            "getVaultsByAccountId": {
                "description": "Get all vaults that are registered using the given account _id",
                "params": [
                    {
                        "name": "account_id",
                        "type": "AccountId"
                    }
                ],
                "type": "Vec<VaultId>"
            },
            "getVaultTotalCollateral": {
                "description": "Get the vault's collateral (including nomination)",
                "params": [
                    {
                        "name": "vault_id",
                        "type": "VaultId"
                    }
                ],
                "type": "BalanceWrapper"
            },
            "getPremiumRedeemVaults": {
                "description": "Get all vaults below the premium redeem threshold.",
                "params": [],
                "type": "Vec<(VaultId, BalanceWrapper)>"
            },
            "getVaultsWithIssuableTokens": {
                "description": "Get all vaults with non-zero issuable tokens, ordered in descending order of this amount",
                "params": [],
                "type": "Vec<(VaultId, BalanceWrapper)>"
            },
            "getVaultsWithRedeemableTokens": {
                "description": "Get all vaults with non-zero redeemable tokens, ordered in descending order of this amount",
                "params": [],
                "type": "Vec<(VaultId, BalanceWrapper)>"
            },
            "getIssueableTokensFromVault": {
                "description": "Get the amount of tokens a vault can issue",
                "params": [
                    {
                        "name": "vault",
                        "type": "VaultId"
                    }
                ],
                "type": "BalanceWrapper"
            },
            "getCollateralizationFromVault": {
                "description": "Returns the collateralization of a specific vault",
                "params": [
                    {
                        "name": "vault",
                        "type": "VaultId"
                    },
                    {
                        "name": "only_issued",
                        "type": "bool"
                    }
                ],
                "type": "UnsignedFixedPoint"
            },
            "getCollateralizationFromVaultAndCollateral": {
                "description": "Returns the collateralization of a specific vault and collateral",
                "params": [
                    {
                        "name": "vault",
                        "type": "VaultId"
                    },
                    {
                        "name": "collateral",
                        "type": "BalanceWrapper"
                    },
                    {
                        "name": "only_issued",
                        "type": "bool"
                    }
                ],
                "type": "UnsignedFixedPoint"
            },
            "getRequiredCollateralForWrapped": {
                "description": "Get the amount of collateral required to issue an amount of InterBTC",
                "params": [
                    {
                        "name": "amount_btc",
                        "type": "BalanceWrapper"
                    },
                    {
                        "name": "currency_id",
                        "type": "CurrencyId"
                    }
                ],
                "type": "BalanceWrapper"
            },
            "getRequiredCollateralForVault": {
                "description": "Get the amount of collateral required for the given vault to be at the current SecureCollateralThreshold with the current exchange rate",
                "params": [
                    {
                        "name": "vault_id",
                        "type": "VaultId"
                    }
                ],
                "type": "BalanceWrapper"
            }
        },
        "oracle": {
            "wrappedToCollateral": {
                "description": "Wrapped to Collateral exchange rate",
                "params": [
                    {
                        "name": "amount",
                        "type": "BalanceWrapper"
                    },
                    {
                        "name": "currency_id",
                        "type": "CurrencyId"
                    }
                ],
                "type": "BalanceWrapper"
            },
            "collateralToWrapped": {
                "description": "Collateral to Wrapped exchange rate",
                "params": [
                    {
                        "name": "amount",
                        "type": "BalanceWrapper"
                    },
                    {
                        "name": "currency_id",
                        "type": "CurrencyId"
                    }
                ],
                "type": "BalanceWrapper"
            }
        },
        "relay": {
            "isTransactionInvalid": {
                "description": "Determine if the RawTx is invalid for the specified VaultId",
                "params": [
                    {
                        "name": "vault_id",
                        "type": "VaultId"
                    },
                    {
                        "name": "raw_tx",
                        "type": "Vec<u8>"
                    }
                ],
                "type": "void"
            }
        },
        "issue": {
            "getIssueRequests": {
                "description": "Get all issue requests for a particular account",
                "params": [
                    {
                        "name": "account_id",
                        "type": "AccountId"
                    }
                ],
                "type": "Vec<(H256, IssueRequest)>"
            },
            "getVaultIssueRequests": {
                "description": "Get all issue requests for a particular vault",
                "params": [
                    {
                        "name": "vault_id",
                        "type": "AccountId"
                    }
                ],
                "type": "Vec<(H256, IssueRequest)>"
            }
        },
        "redeem": {
            "getRedeemRequests": {
                "description": "Get all redeem requests for a particular account",
                "params": [
                    {
                        "name": "account_id",
                        "type": "AccountId"
                    }
                ],
                "type": "Vec<(H256, RedeemRequest)>"
            },
            "getVaultRedeemRequests": {
                "description": "Get all redeem requests for a particular vault",
                "params": [
                    {
                        "name": "vault_id",
                        "type": "AccountId"
                    }
                ],
                "type": "Vec<(H256, RedeemRequest)>"
            }
        },
        "replace": {
            "getOldVaultReplaceRequests": {
                "description": "Get all replace requests from a particular vault",
                "params": [
                    {
                        "name": "account_id",
                        "type": "AccountId"
                    }
                ],
                "type": "Vec<(H256, ReplaceRequest)>"
            },
            "getNewVaultReplaceRequests": {
                "description": "Get all replace requests to a particular vault",
                "params": [
                    {
                        "name": "account_id",
                        "type": "AccountId"
                    }
                ],
                "type": "Vec<(H256, ReplaceRequest)>"
            }
        },
        "refund": {
            "getRefundRequests": {
                "description": "Get all refund requests for a particular account",
                "params": [
                    {
                        "name": "account_id",
                        "type": "AccountId"
                    }
                ],
                "type": "Vec<(H256, RefundRequest)>"
            },
            "getRefundRequestsByIssueId": {
                "description": "Get all refund requests for a particular issue ID",
                "params": [
                    {
                        "name": "issue_id",
                        "type": "H256"
                    }
                ],
                "type": "(H256, RefundRequest)"
            },
            "getVaultRefundRequests": {
                "description": "Get all refund requests for a particular vault",
                "params": [
                    {
                        "name": "account_id",
                        "type": "AccountId"
                    }
                ],
                "type": "Vec<(H256, RefundRequest)>"
            }
        },
        "btcRelay": {
            "verifyBlockHeaderInclusion": {
                "description": "Verify that the block with the given hash is included",
                "params": [
                    {
                        "name": "block_hash",
                        "type": "H256Le"
                    }
                ],
                "type": "void"
            }
        }
    },
    "alias": {
        "tokens": {
            "AccountData": "OrmlAccountData",
            "BalanceLock": "OrmlBalanceLock"
        }
    },
    "instances": {
        "balances": [
            "ksm",
            "kbtc",
            "kint",
            "dot",
            "interBTC",
            "intr"
        ]
    }
}